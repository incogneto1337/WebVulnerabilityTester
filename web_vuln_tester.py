import requests
import subprocess
import logging
from zapv2 import ZAPv2
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# Setup logging
logging.basicConfig(filename='vuln_tester.log', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# XSS payloads
xss_payloads = [
    '<script>alert("XSS")</script>',
    '<img src="x" onerror="alert(\'XSS\')">',
    '<svg/onload=alert(1)>',
    '<iframe src="javascript:alert(\'XSS\')"></iframe>'
]

# SQL Injection payloads
sql_payloads = [
    "1' OR '1'='1",
    "admin' --",
    "' OR '1'='1' --",
    "' OR '1'='1' /*"
]

def test_xss(url, payloads):
    logging.info(f'Testing XSS on {url}')
    for payload in payloads:
        try:
            response = requests.post(url, data={'message': payload})
            if payload in response.text:
                logging.info(f'XSS vulnerability detected with payload: {payload}')
                print(f'XSS vulnerability detected with payload: {payload}')
            else:
                logging.info(f'No XSS vulnerability detected with payload: {payload}')
        except Exception as e:
            log_error('Error testing XSS', e)

def test_sql_injection(url, payloads):
    logging.info(f'Testing SQL Injection on {url}')
    for payload in payloads:
        try:
            response = requests.post(url, data={'username': payload, 'password': 'password'})
            if "SQL syntax" in response.text or "error" in response.text:
                logging.info(f'SQL Injection vulnerability detected with payload: {payload}')
                print(f'SQL Injection vulnerability detected with payload: {payload}')
            else:
                logging.info(f'No SQL Injection vulnerability detected with payload: {payload}')
        except Exception as e:
            log_error('Error testing SQL Injection', e)

def run_sqlmap(url):
    logging.info(f'Running SQLMap on {url}')
    try:
        result = subprocess.run(['sqlmap', '-u', url, '--batch', '--risk=3', '--level=5'],
                                capture_output=True, text=True)
        print(result.stdout)
        if "available" in result.stdout.lower():
            logging.info('SQL Injection vulnerability detected by SQLMap.')
            print('SQL Injection vulnerability detected by SQLMap.')
        else:
            logging.info('No SQL Injection vulnerability detected by SQLMap.')
            print('No SQL Injection vulnerability detected by SQLMap.')
    except Exception as e:
        log_error('Error running SQLMap', e)

def run_zap(url):
    logging.info(f'Running OWASP ZAP on {url}')
    try:
        zap = ZAPv2(apikey='your_zap_api_key')  # Replace with your ZAP API key
        zap.urlopen(url)
        zap.spider.scan(url)
        print('Spidering started...')
        while int(zap.spider.status()) < 100:
            print(f'Spider progress: {zap.spider.status()}%')
        zap.ascan.scan(url)
        print('Active scan started...')
        while int(zap.ascan.status()) < 100:
            print(f'Active scan progress: {zap.ascan.status()}%')
        alerts = zap.core.alerts(baseurl=url, start=0, count=10)
        for alert in alerts:
            print(f'Alert: {alert["alert"]} - Risk: {alert["risk"]}')
        logging.info('OWASP ZAP scan completed.')
    except Exception as e:
        log_error('Error running OWASP ZAP', e)

def generate_report(vulnerabilities):
    logging.info('Generating report...')
    c = canvas.Canvas("vulnerability_report.pdf", pagesize=letter)
    c.drawString(100, 750, "Vulnerability Report")
    y = 730
    for vuln in vulnerabilities:
        c.drawString(100, y, vuln)
        y -= 20
    c.save()
    logging.info('Report generated.')

def log_error(message, exception):
    logging.error(f'{message}: {exception}')
    print(f'{message}: {exception}')

def main():
    print("Web Vulnerability Tester")
    print("1. Test XSS")
    print("2. Test SQL Injection")
    print("3. Run SQLMap")
    print("4. Run OWASP ZAP")
    choice = input("Choose an option (1/2/3/4): ")
    
    url = input('Enter the URL of the form to test: ')

    if choice == '1':
        test_xss(url, xss_payloads)
    elif choice == '2':
        test_sql_injection(url, sql_payloads)
    elif choice == '3':
        run_sqlmap(url)
    elif choice == '4':
        run_zap(url)
    else:
        print('Invalid choice. Please select 1, 2, 3, or 4.')

if __name__ == "__main__":
    main()
